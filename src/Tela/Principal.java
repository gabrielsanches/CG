/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Tela;

import delaunay_triangulation.Delaunay_Triangulation;
import delaunay_triangulation.Point_dt;
import delaunay_triangulation.Triangle_dt;
import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Random;
import trabalho_cg.Calc;
import trabalho_cg.Triangulo;
import trabalho_cg.heightmap;

/**
 *
 * @author seven
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    float m[][];
    ArrayList<Triangulo> T;
    double VRP[] = new double[3];
    double P[] = new double[3];
    double n[];
    double Y[] = new double[3];
    double v[];
    double u[];
    double rt[][];
    double nVRP[][];
    double matriz_perspectiva[][];
    double matriz_composta[][];
    double centro_plano[] = new double[3];
    double centro_plano_rt[][];
    double dist_VRP_plano;

    boolean tipo;

    Delaunay_Triangulation a;

    public Principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jButton_Plotar = new javax.swing.JButton();
        jPanel_desenho = new javax.swing.JPanel();
        jRadioButton_heightmap = new javax.swing.JRadioButton();
        malha = new javax.swing.JRadioButton();
        jButton_gerar = new javax.swing.JButton();
        jButton_suavizar = new javax.swing.JButton();
        regular = new javax.swing.JRadioButton();
        irregular = new javax.swing.JRadioButton();
        perspectiva = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton_Plotar.setText("Plotar");
        jButton_Plotar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_PlotarActionPerformed(evt);
            }
        });

        jPanel_desenho.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel_desenhoLayout = new javax.swing.GroupLayout(jPanel_desenho);
        jPanel_desenho.setLayout(jPanel_desenhoLayout);
        jPanel_desenhoLayout.setHorizontalGroup(
            jPanel_desenhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        jPanel_desenhoLayout.setVerticalGroup(
            jPanel_desenhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        buttonGroup1.add(jRadioButton_heightmap);
        jRadioButton_heightmap.setText("Heightmap");

        buttonGroup1.add(malha);
        malha.setText("Malha");
        malha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                malhaActionPerformed(evt);
            }
        });

        jButton_gerar.setText("Gerar");
        jButton_gerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_gerarActionPerformed(evt);
            }
        });

        jButton_suavizar.setText("Suavizar");
        jButton_suavizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_suavizarActionPerformed(evt);
            }
        });

        buttonGroup2.add(regular);
        regular.setText("Regular");

        buttonGroup2.add(irregular);
        irregular.setText("Irregular");

        perspectiva.setText("Perspectiva");
        perspectiva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                perspectivaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(regular)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(irregular)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton_gerar))
                    .addComponent(jPanel_desenho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jRadioButton_heightmap)
                    .addComponent(malha)
                    .addComponent(jButton_Plotar)
                    .addComponent(perspectiva, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton_suavizar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(regular)
                    .addComponent(irregular)
                    .addComponent(jButton_gerar)
                    .addComponent(perspectiva))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton_suavizar)
                        .addGap(18, 18, 18)
                        .addComponent(jRadioButton_heightmap)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(malha)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton_Plotar)
                        .addGap(0, 168, Short.MAX_VALUE))
                    .addComponent(jPanel_desenho, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_PlotarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_PlotarActionPerformed
        // TODO add your handling code here:
        Graphics g = jPanel_desenho.getGraphics();
        if (m != null) {
            if (jRadioButton_heightmap.isSelected()) {
                g.setColor(Color.white);
                g.fillRect(0, 0, 300, 300);
                for (int i = 0; i < 22500; i++) {
                    g.setColor(new Color(m[2][i], m[2][i], m[2][i]));
                    g.drawLine((int) m[0][i] + 30, (int) m[1][i] + 30, (int) m[0][i] + 30, (int) m[1][i] + 30);
                }
            } else {
                if (malha.isSelected()) {
                    if (tipo) {
                        g.setColor(Color.white);
                        g.fillRect(0, 0, 300, 300);
                        g.setColor(new Color(1, 1, 1));
                        System.out.println("Desenhando Regular");
                        for (Triangulo t : T) {
                            int a[] = t.getTriangulo();
                            g.drawLine((int) m[0][a[0]] + 30, (int) m[1][a[0]] + 30, (int) m[0][a[1]] + 30, (int) m[1][a[1]] + 30);

                            g.drawLine((int) m[0][a[1]] + 30, (int) m[1][a[1]] + 30, (int) m[0][a[2]] + 30, (int) m[1][a[2]] + 30);
                            g.drawLine((int) m[0][a[2]] + 30, (int) m[1][a[2]] + 30, (int) m[0][a[0]] + 30, (int) m[1][a[0]] + 30);
                        }
                    }
                }
            }
        }
        if (!tipo && malha.isSelected()) {
            g.setColor(Color.white);
            g.fillRect(0, 0, 300, 300);
            g.setColor(new Color(1, 1, 1));
            Iterator<Triangle_dt> t = a.trianglesIterator();
            Triangle_dt teste;
            while (t.hasNext()) {
                teste = t.next();
                g.drawLine((int) teste.p1().x() + 30, (int) teste.p1().y() + 30, (int) teste.p2().x() + 30, (int) teste.p2().y() + 30);
                if (teste.p3() != null) {
                    g.drawLine((int) teste.p2().x() + 30, (int) teste.p2().y() + 30, (int) teste.p3().x() + 30, (int) teste.p3().y() + 30);
                    g.drawLine((int) teste.p3().x() + 30, (int) teste.p3().y() + 30, (int) teste.p1().x() + 30, (int) teste.p1().y() + 30);
                }

            }

        }


    }//GEN-LAST:event_jButton_PlotarActionPerformed

    private void jButton_gerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_gerarActionPerformed
        // TODO add your handling code here:
        if (regular.isSelected()) {
            m = heightmap.gerar_heightmap();
            T = heightmap.gerar_triangulos_regular();
            VRP[0] = 5;
            VRP[1] = 20;
            VRP[2] = 20;
//            VRP[0] = 0;
//            VRP[1] = 255;
//            VRP[2] = 255;            
            centro_plano[0] = 2.5;
            centro_plano[1] = 10;
            centro_plano[2] = 10;
            P[0] = 0;
            P[1] = 0;
            P[2] = 0;
            n = Calc.calcular_vetor_n(VRP, P);
            Y[0] = 0;
            Y[1] = 1;
            Y[2] = 0;
            v = Calc.calcular_vetor_v(n, Y);
            u = Calc.calcular_vetor_u(n, v);
//            for (int i=0;i<3;i++){
//                System.out.print("\t"+v[i]);
//            }
//            System.out.println("");
//            for (int i=0;i<3;i++){
//                System.out.print("\t"+u[i]);
//            }
            System.out.println("");
            rt = Calc.calcular_matriz_RT(VRP, u, v, n);
            for (int i = 0; i < 4; i++) {
                for (int j = 0; j < 4; j++) {
                    System.out.print("\t" + rt[i][j]);
                }
                System.out.println("");
            }
            //CALCULO DO VRP DE TELA
            nVRP = Calc.posicao_obseravador(VRP, rt);
            System.out.println("VRP'");
            for (int i = 0; i < 4; i++) {
                System.out.print(nVRP[i][0] + " ");
            }
            System.out.println("");
            //CALCULO PONTO DO CENTRO DO PLANO
            centro_plano_rt = Calc.posicao_centro_plano(centro_plano, rt);
            System.out.println("Centro_P'");
            for (int i = 0; i < 4; i++) {
                System.out.print(centro_plano_rt[i][0] + " ");
            }
            //DISTANCIA ENTRE VRP E PLANO DE PROJECAO.
            dist_VRP_plano = Math.sqrt(Math.pow((centro_plano_rt[0][0] - nVRP[0][0]), 2) + Math.pow((centro_plano_rt[1][0] - nVRP[1][0]), 2) + Math.pow((centro_plano_rt[2][0] - nVRP[2][0]), 2));
            matriz_perspectiva = Calc.matriz_perspectiva(nVRP, centro_plano_rt, dist_VRP_plano);

            System.out.println("\nMatriz Composta");
            matriz_composta = Calc.montar_matriz_composta(rt, matriz_perspectiva);
            for (int i = 0; i < 4; i++) {
                for (int j = 0; j < 4; j++) {
                    System.out.print("\t" + matriz_composta[i][j]);
                }
                System.out.println("");
            }
            tipo = true;
        } else {
            if (irregular.isSelected()) {
                Point_dt p;
                Random r = new Random();
                a = new Delaunay_Triangulation();
                for (int i = 0; i < 450; i++) {
                    a.insertPoint(new Point_dt(r.nextFloat() * 200, r.nextFloat() * 200, r.nextFloat()));
                }
                tipo = false;
                System.out.println(tipo);

            }
        }
    }//GEN-LAST:event_jButton_gerarActionPerformed

    private void jButton_suavizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_suavizarActionPerformed
        // TODO add your handling code here:
        if (m != null) {
            m = heightmap.suavizar_heightmap_regular(m);
        }
    }//GEN-LAST:event_jButton_suavizarActionPerformed

    private void perspectivaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_perspectivaActionPerformed
        if (regular.isSelected() && malha.isSelected()) {
            double[][] Matriz_aux = {{-2.5, -1.5, -0.5, 0.5, 1.5, 2.5, -1.5, -0.5, 0, 0.5, 1.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, -1.5, -0.5, 0, 0.5, 1.5, -2.5, -2.5, -2.5, -2.5, 2.5, 2.5, 2.5, 2.5, 0, 0, 0, 0},
            {2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, -2.5, -2.5, -2.5, -2.5, -2.5, -2.5, -2.5, -2.5, -2.5, -2.5, -2.5, -1.5, -0.5, 0.5, 1.5, -1.5, -0.5, 0.5, 1.5, -1.5, -0.5, 0.5, 1.5},
            {-1.25, -1.25, -1.25, -1.25, -1.25, -1.25, -0.25, 0.75, 1.25, 0.75, -0.25, -1.25, -1.25, -1.25, -1.25, -1.25, -1.25, -0.25, 0.75, 1.25, 0.75, -0.25, -1.25, -1.25, -1.25, -1.25, -1.25, -1.25, -1.25, -1.25, 1.25, 1.25, 1.25, 1.25},
            {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}};

            double[][] Obj_perspectiva = Calc.objeto_perspectiva(Calc.multiplicar_matriz(matriz_composta, Matriz_aux));

            System.out.println("");
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 34; j++) {
                    System.out.print("\t" + Obj_perspectiva[i][j]);
                }
                System.out.println("");
            }
            int[] viewport = {0, 0, 320, 240};
            double[][] perspectiva = Calc.montar_perspetiva_srt(3, 4, centro_plano_rt, viewport);

            System.out.println("");
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    System.out.print("\t" + perspectiva[i][j]);
                }
                System.out.println("");
            }

            double[][] pontos_final = Calc.multiplicar_matriz(perspectiva, Obj_perspectiva);
            Graphics g = jPanel_desenho.getGraphics();
            g.setColor(Color.white);
            g.fillRect(0, 0, 300, 300);
            g.setColor(new Color(1, 1, 1));

            System.out.println("\nPontos finais");
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 34; j++) {
                    System.out.print("\t" + (int) Math.round(pontos_final[i][j]));
                }
                System.out.println("");
            }            
            
            for (int j = 0; j < 34; j++) {
                g.drawLine((int) Math.round(pontos_final[0][j]), (int) Math.round(pontos_final[1][j]), (int) Math.round(pontos_final[0][j]), (int) Math.round(pontos_final[1][j]));
            }
            System.out.println("");

        }

    }//GEN-LAST:event_perspectivaActionPerformed

    private void malhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_malhaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_malhaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JRadioButton irregular;
    private javax.swing.JButton jButton_Plotar;
    private javax.swing.JButton jButton_gerar;
    private javax.swing.JButton jButton_suavizar;
    private javax.swing.JPanel jPanel_desenho;
    private javax.swing.JRadioButton jRadioButton_heightmap;
    private javax.swing.JRadioButton malha;
    private javax.swing.JButton perspectiva;
    private javax.swing.JRadioButton regular;
    // End of variables declaration//GEN-END:variables
}
